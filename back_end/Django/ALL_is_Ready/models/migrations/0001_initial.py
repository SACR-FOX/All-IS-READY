# Generated by Django 3.2.7 on 2022-03-30 14:23

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('CommunityID', models.AutoField(primary_key=True, serialize=False, verbose_name='社区ID')),
                ('CommunityName', models.CharField(max_length=20, verbose_name='社区名称')),
                ('PostCount', models.IntegerField(verbose_name='帖子数')),
                ('AdministratorID', models.IntegerField(verbose_name='管理用户ID')),
                ('Renewal', models.DateTimeField(verbose_name='最后更新时间')),
                ('Poster', models.ImageField(default='/static/img/header_default.png', upload_to='communityHeader', verbose_name='社区封面图像')),
                ('Description', models.CharField(max_length=256, verbose_name='社区简介')),
            ],
            options={
                'verbose_name': '社区名称',
                'verbose_name_plural': '社区名称',
                'db_table': 'Community',
            },
        ),
        migrations.CreateModel(
            name='CommunityTopic',
            fields=[
                ('TopicID', models.AutoField(primary_key=True, serialize=False, verbose_name='社区主题ID')),
                ('Creator', models.IntegerField(verbose_name='创建者ID')),
                ('Time', models.DateTimeField(verbose_name='创建时间')),
                ('HasImage', models.BooleanField(verbose_name='是否含有图片')),
                ('Title', models.CharField(max_length=35, verbose_name='主题标题')),
                ('ImageUri', models.ImageField(default='/static/img/header_default.png', upload_to='TopicHeader', verbose_name='话题封面图像')),
            ],
            options={
                'verbose_name': '社区主题',
                'verbose_name_plural': '社区主题',
                'db_table': 'CommunityTopic',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('FID', models.AutoField(primary_key=True, serialize=False, verbose_name='文件ID')),
                ('Fname', models.CharField(max_length=256, verbose_name='文件名')),
                ('Uri', models.CharField(max_length=256, verbose_name='文件相对地址')),
                ('Theme', models.CharField(max_length=15, verbose_name='分类名称')),
                ('Renewal', models.DateTimeField(verbose_name='最后访问时间')),
            ],
            options={
                'verbose_name': '课程文件',
                'verbose_name_plural': '课程文件',
                'db_table': 'File',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('OrgID', models.AutoField(primary_key=True, serialize=False, verbose_name='组织ID')),
                ('OrgName', models.CharField(max_length=25, verbose_name='组织名称')),
                ('MonitorID', models.IntegerField(verbose_name='班长ID')),
                ('Description', models.CharField(max_length=200, verbose_name='描述')),
            ],
            options={
                'verbose_name': '组织',
                'verbose_name_plural': '组织',
                'db_table': 'Organization',
            },
        ),
        migrations.CreateModel(
            name='OrgTask',
            fields=[
                ('TaskID', models.AutoField(primary_key=True, serialize=False, verbose_name='任务ID')),
                ('OrgID', models.IntegerField(verbose_name='组织ID')),
                ('CID', models.IntegerField(verbose_name='绑定课程ID')),
                ('TimeStart', models.DateTimeField(verbose_name='任务开始时间')),
                ('TimeDue', models.DateTimeField(verbose_name='任务到期时间')),
                ('Status', models.BooleanField(verbose_name='当前状态')),
                ('Description', models.CharField(max_length=256, verbose_name='任务描述')),
                ('TaskName', models.CharField(max_length=30, verbose_name='任务标题')),
                ('Creator', models.CharField(max_length=20, verbose_name='创建者')),
                ('AckCount', models.IntegerField(verbose_name='已知人数')),
            ],
            options={
                'verbose_name': '班级任务',
                'verbose_name_plural': '班级任务',
                'db_table': 'OrhTask',
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('ID', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('PostID', models.IntegerField(verbose_name='所属帖子ID')),
                ('Uri', models.ImageField(default='/static/img/header_default.png', upload_to='PostImage', verbose_name='帖子图像')),
            ],
            options={
                'verbose_name': '帖子图片',
                'verbose_name_plural': '帖子图片',
                'db_table': 'PostImage',
            },
        ),
        migrations.CreateModel(
            name='Shedule',
            fields=[
                ('SheduleID', models.AutoField(primary_key=True, serialize=False, verbose_name='所属用户ID')),
                ('UID', models.IntegerField(verbose_name='所属用户ID')),
                ('DurationStart', models.IntegerField(verbose_name='课程开始相对时间')),
                ('DurationEnd', models.IntegerField(verbose_name='课程结束相对时间')),
                ('Repeat', models.IntegerField(verbose_name='课程日期')),
                ('CurName', models.CharField(max_length=20, verbose_name='课程名称')),
                ('Tag', models.IntegerField(verbose_name='标签颜色')),
            ],
            options={
                'verbose_name': '课程表',
                'verbose_name_plural': '课程表',
                'db_table': 'Shedule',
            },
        ),
        migrations.CreateModel(
            name='ToDoList',
            fields=[
                ('ID', models.AutoField(primary_key=True, serialize=False, verbose_name='事项ID')),
                ('OrgID', models.IntegerField(verbose_name='组织ID')),
                ('UID', models.IntegerField(verbose_name='所属用户ID')),
                ('ItemName', models.CharField(max_length=20, verbose_name='计划名称')),
                ('Time', models.DateTimeField(verbose_name='提醒时间')),
                ('Status', models.BooleanField(verbose_name='当前状态')),
                ('Tag', models.IntegerField(verbose_name='标签颜色')),
            ],
            options={
                'verbose_name': '提醒事项',
                'verbose_name_plural': '提醒事项',
                'db_table': 'ToDoList',
            },
        ),
        migrations.CreateModel(
            name='TopicPost',
            fields=[
                ('PostID', models.AutoField(primary_key=True, serialize=False, verbose_name='主题帖子ID')),
                ('TopicID', models.IntegerField(verbose_name='社区主题ID')),
                ('UID', models.IntegerField(verbose_name='用户ID')),
                ('Time', models.DateTimeField(verbose_name='创建时间')),
                ('HasImage', models.BooleanField(verbose_name='是否含有图片')),
                ('Content', models.CharField(max_length=300, verbose_name='帖子内容')),
            ],
            options={
                'verbose_name': '主题帖子',
                'verbose_name_plural': '主题帖子',
                'db_table': 'TopicPost',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('UID', models.AutoField(primary_key=True, serialize=False, verbose_name='用户ID')),
                ('Uname', models.CharField(default='unnamed', max_length=20, verbose_name='用户名')),
                ('Passwd', models.CharField(default='password-not-set', max_length=25, verbose_name='密码')),
                ('OrgID', models.IntegerField(verbose_name='组织ID')),
                ('STUID', models.IntegerField(verbose_name='学号')),
                ('Rank', models.IntegerField(verbose_name='等级')),
                ('Header', models.ImageField(default='/static/img/header_default.png', upload_to='userHeader', verbose_name='用户头像')),
                ('EXP', models.IntegerField(verbose_name='用户经验值')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'User',
            },
        ),
    ]
